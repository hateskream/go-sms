// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: spaces.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFeature = `-- name: AddFeature :one
INSERT INTO features (name)
VALUES ($1) RETURNING id
`

func (q *Queries) AddFeature(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, addFeature, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addSpace = `-- name: AddSpace :one
INSERT INTO spaces (name)
VALUES ($1) RETURNING id, name, physical_id, group_id, status_id, has_camera
`

func (q *Queries) AddSpace(ctx context.Context, name string) (Space, error) {
	row := q.db.QueryRow(ctx, addSpace, name)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhysicalID,
		&i.GroupID,
		&i.StatusID,
		&i.HasCamera,
	)
	return i, err
}

const addSpaceFeature = `-- name: AddSpaceFeature :exec
INSERT INTO space_features (space_id,Feature_id)
VALUES ($1,$2)
`

type AddSpaceFeatureParams struct {
	SpaceID   pgtype.Int4 `json:"space_id"`
	FeatureID pgtype.Int4 `json:"feature_id"`
}

func (q *Queries) AddSpaceFeature(ctx context.Context, arg AddSpaceFeatureParams) error {
	_, err := q.db.Exec(ctx, addSpaceFeature, arg.SpaceID, arg.FeatureID)
	return err
}

const deleteFeature = `-- name: DeleteFeature :one
DELETE FROM features
WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteFeature(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteFeature, id)
	err := row.Scan(&id)
	return id, err
}

const deleteSpace = `-- name: DeleteSpace :exec
DELETE FROM spaces
WHERE id = $1
`

func (q *Queries) DeleteSpace(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSpace, id)
	return err
}

const getFeatures = `-- name: GetFeatures :many
SELECT id, name
FROM features
ORDER BY id
`

func (q *Queries) GetFeatures(ctx context.Context) ([]Feature, error) {
	rows, err := q.db.Query(ctx, getFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpaces = `-- name: GetSpaces :many
SELECT id, name, physical_id, group_id, status_id, has_camera
FROM spaces
ORDER BY id
`

func (q *Queries) GetSpaces(ctx context.Context) ([]Space, error) {
	rows, err := q.db.Query(ctx, getSpaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Space
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PhysicalID,
			&i.GroupID,
			&i.StatusID,
			&i.HasCamera,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeature = `-- name: UpdateFeature :exec
UPDATE features
  set name = $2  
WHERE id = $1
`

type UpdateFeatureParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateFeature(ctx context.Context, arg UpdateFeatureParams) error {
	_, err := q.db.Exec(ctx, updateFeature, arg.ID, arg.Name)
	return err
}
